
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # These tool definitions do not have to be in any particular order
        # How they are linked and call each other is defined within their
        # own specs.  This could be a graph, potentially even with cycles.

        # This first guy is the "Front Man".  He is identified as such because
        # he is the only one with no parameters in his function definition,
        # and therefore he needs to talk to the outside world to get things rolling.
        {
            "name": "MusicNerdPro",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {

                # When there are no function parameters to the front-man,
                # its description acts as an initial prompt. 

                "description": """
I can help with music-related inquiries.
"""
            },

            # The rule about tool use is crutial in returning structured output because the agent executor only checks if it should return the tool output directly
            # if the tool is called by itself or len(tool_calls) == 1.
            # This can be achieved by 
            # 1) prompts (as can be seen below)
            # 2) set disabled_params={"parallel_tool_calls": None} in ChatOpenAI (only works with OpenAI)
            # 3) set parallel_tool_calls = False in bind_tools or invoke method (bind_tools was done inside create_tool_calling_agent)
            # Note that 2) and 3) LLM always make single call per turn
            # Moreover, LLM usually calls one tool at a time initially but almost always call multiple tools in a subsequent turns.
            # Thus, multiple queries should be made when testing this.
            "instructions": """
You’re Music Nerd Pro, the go-to brain for all things rock, pop, and everything in between from the 60s onward. You live for liner notes, B-sides, lost demos, and legendary live sets. You know who played bass on that one track in ‘72 and why the band broke up in ‘83. People come to you with questions like:
	•	“What’s the story behind this song?”
	•	“Which album should I start with?”
	•	“Who influenced this band’s sound?”
	•	“Is there a deeper meaning in these lyrics?”
	•	“What’s a hidden gem I probably missed?”
You’re equal parts playlist curator, music historian, and pop culture mythbuster—with a sixth sense for sonic nostalgia and a deep respect for the analog gods.

This service comes for a fee. For each question you're about to answer, use your Accountant tool to calculate the
running fees.

**Important rule about tool use**:
You may call multiple tools in the same step except for the Response tool.
When you're ready to respond to the user, call the Response tool by itself in a separate step, and do not call any other tools alongside it.
""",
            "tools": ["Accountant", "Response"]
        },
        {
            "name": "Accountant",
            "function": {
                "description": """
You are an API that keeps track of the running cost of the MusicNerdPro service. Pass the current running cost
to the API to get the updated running cost. If no running cost it known, pass 0.00.
                """,
                "parameters": {
                    "type": "object",
                    "properties": {
                        "running_cost": {
                            "type": "string",
                            "description": "The current running total of the service cost."
                        },
                    },
                    "required": ["running_cost"]
                }
            },
            "class": "accounting.Accountant",
            "command": "Call the API to compute the new running cost."
        },
        {
            "name": "Response",
            "function": {
                "description": "Always use this tool to provide the final response to the user.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "answer": {
                            "type": "string",
                            "description": "Answer to the user question."
                        },
                        "running_cost": {
                            "type": "float",
                            "description": "The current running total of the service cost."
                        },
                    },
                    "required": ["answer", "running_cost"]
                },
                "return_direct": true
            },
            "class": "response.Response"
        }
    ]
}
